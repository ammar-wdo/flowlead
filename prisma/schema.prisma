// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String @unique
  firstName String
  lastName  String
  email     String @unique

  image      String?
  companies  Company[]
  services   Service[]
  forms      Form[]
  quotations Quotation[]
  Invoice    Invoice[]
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  slug      String   @unique

  name         String
  address      String
  zipcode      String
  city         String
  country      String
  websiteUrl   String?
  logo         String?
  phone        String
  companyEmail String  @unique

  cocNumber     String?
  industry      String?
  vatNumber     String?
  contactPerson String
  IBAN          String?
  termsUrl      String?

  customerStripeId String?
  plan             Plan    @default(FREE)

  quotesSettings QoutesSettings?

  invoiceSettings InvoiceSettings?

  widgetSettings WidgetSettings?

  forms       Form[]
  services    Service[]
  submissions Submission[]
  contacts    Contact[]
  quotations  Quotation[]

  accountId String    @db.ObjectId
  account   Account   @relation(fields: [accountId], references: [id])
  Invoice   Invoice[]
}

model Quotation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  quotationNumber Int
  quotationString String

  quotationDate DateTime @default(now())
  expiryDate    DateTime

  subject   String?
  lineItems LineItem[]

  attatchments attatchment[]

  footNote String?

  discount       QuotationDiscount?
  discountAmount Float?

  totalAmount Float

  totalTax Float?
  isSeen   Boolean @default(false)

  signature    String?
  dateAccepted DateTime?
  acceptedBy   String?

  status QuotationStatus @default(CONCEPT)

  quotationSettingsId String         @db.ObjectId
  quotationSettings   QoutesSettings @relation(fields: [quotationSettingsId], references: [id])

  contactPersonId String?        @db.ObjectId
  contactPerson   ContactPerson? @relation(fields: [contactPersonId], references: [id])

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id])
  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
}

model Invoice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  invoiceNumber Int
  invoiceString String

  invoiceDate DateTime @default(now())
  expiryDate  DateTime

  subject   String?
  lineItems LineItem[]

  attatchments attatchment[]

  footNote String?

  discount       QuotationDiscount?
  discountAmount Float?

  totalAmount Float

  totalTax Float?
  isSeen   Boolean @default(false)

  status InvoiceStatus @default(CONCEPT)

  invoiceSettingsId String          @db.ObjectId
  invoiceSettings   InvoiceSettings @relation(fields: [invoiceSettingsId], references: [id])

  contactPersonId String?        @db.ObjectId
  contactPerson   ContactPerson? @relation(fields: [contactPersonId], references: [id])

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id])
  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
}

model Submission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Json

  contactId String  @unique @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
}

model ContactPerson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactName  String
  emailAddress String
  phoneNumber  String?

  contactId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id])

  quotations Quotation[]
  Invoice    Invoice[]
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactType     ContactType     @default(INDIVIDUAL)
  contactCategory ContactCategory @default(LEAD)
  contactName     String
  emailAddress    String
  companyName     String?
  phoneNumber     String?
  mobileNumber    String?

  address String?
  country String?
  city    String?
  zipcode String?

  cocNumber String?

  vatNumber String?
  IBAN      String?

  submission     Submission?
  quotations     Quotation[]
  contactPersons ContactPerson[]

  companyId String    @db.ObjectId
  company   Company   @relation(fields: [companyId], references: [id])
  Invoice   Invoice[]
}

model QoutesSettings {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  dueDays      Int           @default(14)
  prefix       String        @default("F-")
  nextNumber   Int           @default(1)
  senderName   String
  senderEmail  String
  bcc          String?
  attatchments attatchment[]
  footNote     String?
  subject      String?
  body         String?

  quotations Quotation[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique @db.ObjectId
}

model InvoiceSettings {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  dueDays      Int           @default(14)
  prefix       String        @default("O-")
  nextNumber   Int           @default(1)
  senderName   String
  senderEmail  String
  bcc          String?
  attatchments attatchment[]
  footNote     String?
  subject      String?
  body         String?

  invoices Invoice[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique @db.ObjectId
}

model WidgetSettings {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  color            String   @default("#4657C2")
  widgetButtonText String   @default("Open Widget")
  thankyouText     String   @default("we will get back to you as soon as possible")
  widgetPostion WidgetPostion @default(RIGHT)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyId        String   @unique @db.ObjectId
  company          Company  @relation(fields: [companyId], references: [id])
}

model Form {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  name        String
  description String?
  slug        String  @unique

  isPublished Boolean @default(false)
  isWidjet    Boolean @default(false)

  elements Element[]
  rules    Rule[]

  views Viewd[]

  services String[] @db.ObjectId

  logo String?

  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  name           String
  description    String?
  pricingType    PricingType
  isRequired     Boolean     @default(false)
  isLineItem     Boolean     @default(false)
  taxPercentage  Float
  options        Option[]
  addToQoutation Boolean     @default(false)

  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  forms String[] @db.ObjectId

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
}

model Viewd {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])
}

// types

enum FieldType {
  email
  name
  text
  longText
  number
  select
  radio
  checkbox
  address
  phone
  breaker
  sectionBreaker
  date
}

enum LogicalOperator {
  AND
  OR
  NOT
}

enum Action {
  SHOW
  HIDE
}

enum ComparisonOperator {
  CONTAINS
  EMPTY
  NOT_EMPTY
  IS
  IS_NOT
  EQ
  NEQ
  GT
  LT
  BEFORE
  AFTER
}

enum TextComparisonOperator {
  CONTAINS
  EMPTY
  NOT_EMPTY
  IS
}

enum NumberComparisonOperator {
  EQ
  NEQ
  GT
  LT
  EMPTY
  NOT_EMPTY
}

enum ServiceAndMultipleComparisonOperator {
  IS
  IS_NOT
  NOT_EMPTY
  EMPTY
}

enum DateComparisonOperator {
  BEFORE
  AFTER
}

enum PhoneComparisonOperator {
  EMPTY
  NOT_EMPTY
}

type Rule {
  id         String
  conditions Condition[]
  then       Then
}

type Condition {
  id              String
  field           String
  operator        ComparisonOperator
  value           String?
  logicalOperator LogicalOperator?
}

type Then {
  field  String
  action Action
}

type ValidationOptions {
  required  Boolean?
  minLength Int?
  maxLength Int?
  min       Int?
  max       Int?
  pattern   String?
}

enum ElementType {
  FIELD
  SERVICE_ELEMENT
}

type Element {
  id      String
  type    ElementType
  field   Field?
  service ServiceElement?
}

type Address {
  addressLabel     String?
  addressShow      Boolean? @default(true)
  houseNumberLabel String?
  houseNumberShow  Boolean? @default(true)
  postalCodeLabel  String?
  postalCodeShow   Boolean? @default(true)
  cityLabel        String?
  cityShow         Boolean? @default(true)
  stateRegionLabel String?
  stateRegionShow  Boolean? @default(true)
  countryLabel     String?
  countryShow      Boolean? @default(true)
}

type Field {
  id          String
  label       String
  placeholder String?
  hint        String?
  type        FieldType
  options     String[]
  address     Address?
  validations ValidationOptions?
}

type ServiceElement {
  id             String
  name           String
  description    String?
  pricingType    PricingType
  isRequired     Boolean     @default(false)
  isLineItem     Boolean     @default(false)
  taxPercentage  Float
  options        Option[]
  addToQoutation Boolean     @default(false)
}

enum PricingType {
  SINGLE_PRICE
  CHECKBOX_GROUP
  RADIO_GROUP
  DROPDOWN_GROUP
}

type Option {
  id             String
  name           String
  description    String?
  image          String?
  enableQuantity Boolean @default(false)
  price          Int
}

type FormType {
  id        String
  createdAt DateTime
  updatedAt DateTime
  userId    String

  name        String
  description String?
  slug        String

  elements Element[]

  services String[] @db.ObjectId

  companyId String @db.ObjectId
}

type attatchment {
  name String?
  type String?
  size String?
  url  String?
}

enum ContactType {
  INDIVIDUAL
  BUSINESS
}

enum ContactCategory {
  CONTACT
  LEAD
}

type LineItem {
  id            String
  name          String
  description   String?
  quantity      Int
  price         Float
  taxPercentage Float
  totalPrice    Float
  taxAmount     Float
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

type QuotationDiscount {
  description     String?
  type            DiscountType @default(PERCENTAGE)
  percentageValue Float?
  fixedValue      Float?
}

enum QuotationStatus {
  CONCEPT
  SENT
  ACCEPTED
  DECLINED
  EXPIRED
  INVOICED
}

enum InvoiceStatus {
  CONCEPT
  OPEN
  PAID
  EXPIRED
  UNCOLLECTABLE
}

enum Plan {
  FREE
  PREMIUM
}

enum WidgetPostion {
  LEFT
  RIGHT
}
