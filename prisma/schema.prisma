// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String @unique
  firstName String
  lastName  String
  email     String @unique

  image     String?
  companies Company[]
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  slug      String   @unique

  name          String
  address       String
  zipcode       String
  city          String
  country       String
  websiteUrl    String?
  logo          String?
  phone         String
  companyEmail  String @unique
  serviceEmail  String?
  cocNumber     String?
  industry      String?
  vatNumber     String
  contactPerson String
  IBAN          String
  termsUrl      String?

  qoutationSettings QoutesSettings
  invoiceSettings   InvoiceSettings

  forms Form[]

  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
}

model Form {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  slug        String @unique

  isPublished Boolean @default(false)
  isWidjet    Boolean @default(false)

  fields   Field[]
  views    Viewd[]
  services Service[]

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  description    String?
  pricingsType   PricingType
  isRequired     Boolean     @default(false)
  options        Option[]
  addToQoutation Boolean     @default(false)

  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])
}

model Viewd {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])
}

// types

enum FieldType {
  text
  number
  select
  radio
  checkbox
  breaker
}

enum LogicOperator {
  AND
  OR
  NOT
}

enum ComparisonOperator {
  EQ //Equals
  NE //Not Equals
  GT // Greater Than
  LT //Less Than
  GTE //Greater than or Equals
  LTE //Less than or Equals
}

type Condition {
  fieldId    String?
  operator   ComparisonOperator?
  value      String?
  logic      LogicOperator?
  conditions Condition[]
}

type ConditionalOptions {
  logic      LogicOperator?
  conditions Condition[]
}

type ValidationOptions {
  required  Boolean?
  minLength Int?
  maxLength Int?
  min       Int?
  max       Int?
  pattern   String?
}

type Field {
  id          String
  label       String
  type        FieldType
  options     String[]
  validations ValidationOptions
  conditional ConditionalOptions
}

type QoutesSettings {
  dueDays               Int    @default(14)
  qouteNumberPrefix     String @default("")
  latestQoutationNumber Int    @default(0)
  subject               String @default("")
  body                  String @default("")
}

type InvoiceSettings {
  dueDays               Int    @default(14)
  qouteNumberPrefix     String @default("")
  latestQoutationNumber Int    @default(0)
  subject               String @default("")
  body                  String @default("")
}

enum PricingType {
  single
}

type Option {
  name           String
  description    String?
  image          String?
  enableQuantity Boolean @default(false)
  price          Int
}
