// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String @unique
  firstName String
  lastName  String
  email     String @unique

  image     String?
  companies Company[]
  services  Service[]
  forms     Form[]
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  slug      String   @unique

  name          String
  address       String
  zipcode       String
  city          String
  country       String
  websiteUrl    String?
  logo          String?
  phone         String
  companyEmail  String  @unique
  serviceEmail  String?
  cocNumber     String?
  industry      String?
  vatNumber     String
  contactPerson String
  IBAN          String
  termsUrl      String?

    quotesSettings   QoutesSettings? @relation(fields: [quotesSettingsId], references: [id])
  quotesSettingsId String?         @unique @db.ObjectId

  invoiceSettings   InvoiceSettings

  forms    Form[]
  services Service[]

  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
}


model  QoutesSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  dueDays     Int     @default(14)
  prefix      String?
  nextNumber  Int     @default(0)
  senderName  String  
  senderEmail String  
  bcc         String?
  attatchments String?
  footNote     String?
  subject      String  
  body         String  
  
   company     Company? @relation()
}

model Form {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  name        String
  description String?
  slug        String  @unique

  isPublished Boolean @default(false)
  isWidjet    Boolean @default(false)

  elements Element[]
  rules    Rule[]

  views Viewd[]

  services String[] @db.ObjectId

  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  name           String
  description    String?
  pricingType    PricingType
  isRequired     Boolean     @default(false)
  isLineItem     Boolean     @default(false)
  taxPercentage  Float
  options        Option[]
  addToQoutation Boolean     @default(false)

  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  forms String[] @db.ObjectId

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])
}

model Viewd {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])
}

// types

enum FieldType {
  text
  longText
  number
  select
  radio
  checkbox
  address
  phone
  breaker
  sectionBreaker
}

enum LogicalOperator {
  AND
  OR
  NOT
}

enum Action {
  SHOW
  HIDE
}

enum ComparisonOperator {
  CONTAINS
  EMPTY
  NOT_EMPTY
  IS
  IS_NOT
  EQ
  NEQ
  GT
  LT
  BEFORE
  AFTER
}

enum TextComparisonOperator {
  CONTAINS
  EMPTY
  NOT_EMPTY
  IS
}

enum NumberComparisonOperator {
  EQ
  NEQ
  GT
  LT
  EMPTY
  NOT_EMPTY
}

enum ServiceAndMultipleComparisonOperator {
  IS
  IS_NOT
  NOT_EMPTY
  EMPTY
}

enum DateComparisonOperator {
  BEFORE
  AFTER
}

enum PhoneComparisonOperator {
  EMPTY
  NOT_EMPTY
}

type Rule {
  id         String
  conditions Condition[]
  then       Then
}

type Condition {
  id              String
  field           String
  operator        ComparisonOperator
  value           String?
  logicalOperator LogicalOperator?
}

type Then {
  field  String
  action Action
}

type ValidationOptions {
  required  Boolean?
  minLength Int?
  maxLength Int?
  min       Int?
  max       Int?
  pattern   String?
}

enum ElementType {
  FIELD
  SERVICE_ELEMENT
}

type Element {
  id      String
  type    ElementType
  field   Field?
  service ServiceElement?
}

type Address {
  addressLabel     String?
  addressShow      Boolean? @default(true)
  houseNumberLabel String?
  houseNumberShow  Boolean? @default(true)
  postalCodeLabel  String?
  postalCodeShow   Boolean? @default(true)
  cityLabel        String?
  cityShow         Boolean? @default(true)
  stateRegionLabel String?
  stateRegionShow  Boolean? @default(true)
  countryLabel     String?
  countryShow      Boolean? @default(true)
}

type Field {
  id          String
  label       String
  placeholder String?
  hint        String?
  type        FieldType
  options     String[]
  address     Address?
  validations ValidationOptions?
}

type ServiceElement {
  id             String
  name           String
  description    String?
  pricingType    PricingType
  isRequired     Boolean     @default(false)
  isLineItem     Boolean     @default(false)
  taxPercentage  Float
  options        Option[]
  addToQoutation Boolean     @default(false)
}



type InvoiceSettings {
  dueDays               Int    @default(14)
  qouteNumberPrefix     String @default("")
  latestQoutationNumber Int    @default(0)
  subject               String @default("")
  body                  String @default("")
}

enum PricingType {
  SINGLE_PRICE
  CHECKBOX_GROUP
  RADIO_GROUP
  DROPDOWN_GROUP
}

type Option {
  id             String
  name           String
  description    String?
  image          String?
  enableQuantity Boolean @default(false)
  price          Int
}
